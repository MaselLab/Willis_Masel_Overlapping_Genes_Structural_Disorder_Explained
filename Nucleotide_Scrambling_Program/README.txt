This directory contains five programs and three tab-delimited flat files.

The programs are as follows:

==================================

Full_Program_Nucleotide_Sequence_Scrambler_Tab_Delimited.py

This is the main program and will be the one the user interacts with. It's function is to take in a nucleotide sequence, scrambled the body of the sequence and return it to the user. 

The program reads in a tab-delimited file with the following entries:

	[1] - UID
	[2] - Family
	[3] - Species
	[4] - Gene Designation (Either coding or control. Only genes with the 
	designation "CodingGene" will be scrambled. Controls will be ignored)
	[5] - Gene Name
	[6] - Nucleotide Sequence

Three filters are implemented:

	1 - The program checks to see whether the input nucleotide sequence is a coding gene or a control. If it's a control, the sequence is discarded. If it's a coding sequence, it passes the filter
	
	2 - The program scans the nucleotide sequence input by the user for any N in the sequence, denoting an unknown nucleotide or sequence of nucleotides. If one is found, the sequence is discarded. 

	3 - The program checks to see whether the coding sequence is a multiple of 3 in length. If it is not, it is discarded. 

If all three filters are passed, the program scrambles the sequence.

It starts by removing the start and stop codons from the sequence, using the submodule removeStartStop, found in the file Remove_Start_Stop_Function.py. It keeps track of the start/stop codons so they can be reattached after scrambling. 

It then scrambles the body of the sequence using the submodule sequenceScrambler, found in the file Sequence_Scrambler_Function.py. This function uses a random number generator to randomly assemble a new nucleotide sequence from the original one so that the exact composition of the original sequence is retained. 

The program then scans the sequence for any stop codons that may have been generated in the process. If one is found, a nucleotide within the stop codon is selected at random and exchanged with a nucleotide selected from the rest of the sequence at random. This is done with the submodule stopCodonScrambler found in the file Stop_Codon_Scrambler_Function.py

Once no more stop codons remain in the sequence, the start and stop codons saved earlier are reattached the body of the sequence.

The final scrambled nucleotide sequence, protein sequence, and protein sequence with all cysteines removed (so that IUPred may be run on the sequence - see: Materials and Methods) are printed to tab-delimited format, along with all input information. Output entries are the following:

	[1] - UID
	[2] - Family
	[3] - Species
	[4] - Designation: 'ScrambledByNucleotideControl'
	[5] - Gene Name
	[6] - Scrambled Nucleotide Sequence
	[7] - Protein-Translated Scrambled Sequence
	[8] - Protein-Translated Scrambled Sequence - No Cysteines

This output is printed to stdout and can be redirected to a flat file by the user using the command python3 Full_Program_Nucleotide_Sequence_Scrambler_Tab_Delimited.py >[filename.txt] in the command line.

==================================

There are three flat files that are included in this directory in tab-delimited format. Two are input files (1 and 2), the other is an output file generated by this program. 

	1 - EnsemblV73_MouseGenes.txt
	These are protein-coding mouse genes used briefly as controls in this project.

	2 - VirusGenes_Nonoverlapping_Controls_Complete.txt
	These are non-overlapping viral control genes.


	3 - ScrambledControlSequences.txt
	This is output from running the viral genes through the main program. 